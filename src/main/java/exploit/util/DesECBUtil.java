package exploit.util;

import org.apache.commons.codec.binary.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;


public class DesECBUtil {

    public static String encryptDES(String encryptString, String encryptKey) throws Exception{
        Cipher cipher = Cipher.getInstance("DES/ECB/noPadding");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(getKey(encryptKey), "DES"));
        byte[] resultBytes = cipher.doFinal(encryptString.getBytes("UTF-8"));
        return Base64.encodeBase64String(resultBytes);
    }

    public static String decryptDES(String decryptString, String decryptKey) throws Exception{
        byte[] sourceBytes = Base64.decodeBase64(decryptString);
        Cipher cipher = Cipher.getInstance("DES/ECB/noPadding");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(getKey(decryptKey), "DES"));
        byte[] resultBytes = cipher.doFinal(sourceBytes);
        return new String(resultBytes);
    }

    private static byte[] getKey(String keyRule) {
        Key key;
        byte[] keyByte = keyRule.getBytes();
        byte[] keyTemp = new byte[8];
        for (int i = 0; i < keyByte.length && i < keyTemp.length; i++) {
            keyTemp[i] = keyByte[i];
        }
        key = new SecretKeySpec(keyTemp, "DES");
        return key.getEncoded();
    }
}
